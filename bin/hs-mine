#!/usr/bin/env node

'use strict';

process.title = 'hs-mine';

const assert = require('assert');
const Config = require('bcfg');
const miner = require('../');
const pkg = require('../package.json');

const config = new Config('hs-mine');

config.load({
  env: true,
  argv: true
});

let hdr;
let target;
let backend;
let type;
let nonce;
let range;
let grids;
let blocks;
let threads;
let device;
let mantissa;
let quiet;
let info;
let version;
let help;

try {
  hdr = config.buf(['header', 'hdr', 0], null, 'hex');
  target = config.buf(['target', 't', 1], null, 'hex');
  backend = config.str(['backend', 'b', 2], miner.BACKEND);
  nonce = config.uint(['nonce', 'n'], 0);
  range = config.uint(['range', 'r'], 0xffffffff);
  grids = config.uint(['grids', 'm'], 52428);
  blocks = config.uint(['blocks', 'n'], 512);
  threads = config.uint(['threads', 'x'], 26843136);
  device = config.uint(['device', 'd'], 0);
  quiet = config.bool(['quiet', 'q'], false);
  info = config.bool(['info', 'i'], false);
  version = config.bool(['version', 'v'], false);
  help = config.bool(['help', 'h', '?'], false);
} catch (e) {
  console.error(e.message);
  target = null;
  mantissa = 0;
  info = false;
  version = false;
  help = true;
}

if (version) {
  console.error(pkg.version);
  process.exit(1);
  return;
}

if (info)
  hdr = Buffer.alloc(4);

if (target && target.length === 4) {
  mantissa = target.readUInt32BE(0);
  target = null;
}

if (mantissa && !target)
  target = miner.toTarget(mantissa);
else
  target = miner.TARGET;

if (!hdr || help) {
  console.error(`hs-mine ${pkg.version}`);
  console.error(
    '  Copyright (c) 2018, Christopher Jeffrey <chjj@handshake.org>');
  console.error('');
  console.error('Usage: $ hs-mine [header]    [target]   [backend]');
  console.error('                  --target [hex]  --backend [name]');
  console.error('                  --nonce [num]   --range [num]');
  console.error('                  --grids [grids], --blocks [blocks]');
  console.error('                  --threads [threads]');
  console.error('                  --bits [num]    --quiet');
  console.error('                  --info          --help');
  process.exit(1);
  return;
}

if (!quiet || info) {
  if (!info) {
    console.log('Mining header: %s', hdr.toString('hex'));
    console.log('Target: %s', target.toString('hex'));
  }

  const types = [];
  if (miner.getCPUCount() > 0)
    types.push('cpu');
  if (miner.HAS_CUDA)
    types.push('cuda');
  if (miner.HAS_OPENCL)
    types.push('opencl');

  type = miner.getBackendDevice(backend)

  console.log('Network: %s', miner.NETWORK);
  console.log('Device Type: %s', type);
  console.log('Backend: %s', backend);
  console.log('');

  if (miner.HAS_CUDA) {
    console.log('CUDA Devices:');
    for (const {id, name, memory, bits, clock} of miner.getDevices('cuda'))
      console.log(`  ${id}: <${name}> ${memory} ${bits} ${clock}`);
  }

  if (miner.HAS_OPENCL) {
    console.log('OpenCL Devices:');
    for (const {id, name, memory, bits, clock} of miner.getDevices('opencl'))
      console.log(`  ${id}: <${name}> ${memory} ${bits} ${clock}`);
  }

  if (type === 'cpu') {
    console.log('CPUs:');
    for (const {id, name, memory, bits, clock} of miner.getCPUs())
      console.log(`  ${id}: <${name}> ${memory} ${bits} ${clock}`);
  }

  if (info) {
    process.exit(0);
    return;
  }
}

(async () => {
  const [result, match] = await miner.mineAsync(hdr, {
    backend,
    nonce,
    range,
    target,
    grids,
    blocks,
    threads,
    device
  });

  if (!quiet) {
    console.log('Solution:');
    console.log('Nonce: %d', result);
    console.log('Match: %s', match);
  }

  assert.strictEqual(miner.verify(hdr, match ? target : null), 0);

  hdr.writeUInt32LE(result, 0, 4);

  if (!quiet)
    console.log('Mined header:');

  console.log(hdr.toString('hex'));
})().catch((err) => {
  console.error(err.message);
  process.exit(1);
});
